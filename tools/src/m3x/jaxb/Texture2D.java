//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-463 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.06.02 at 11:04:04 PM EST 
//


package m3x.jaxb;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.HexBinaryAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;extension base="{}TransformableType">
 *       &lt;sequence>
 *         &lt;choice>
 *           &lt;element ref="{}Image2D" minOccurs="0"/>
 *           &lt;element ref="{}Image2DInstance" minOccurs="0"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *       &lt;attribute name="color" type="{}ColorType" default="00FFFFFF" />
 *       &lt;attribute name="blending" type="{}Texture2DBlendModeType" />
 *       &lt;attribute name="wrapS" type="{}Texture2DWrapModeType" />
 *       &lt;attribute name="wrapT" type="{}Texture2DWrapModeType" />
 *       &lt;attribute name="levelFilter" type="{}TextureMipmapModeType" />
 *       &lt;attribute name="imageFilter" type="{}TextureFilterModeType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "image2D",
    "image2DInstance"
})
@XmlRootElement(name = "Texture2D")
public class Texture2D
    extends TransformableType
{

    @XmlElement(name = "Image2D")
    protected Image2D image2D;
    @XmlElement(name = "Image2DInstance")
    protected Image2DInstance image2DInstance;
    @XmlAttribute
    @XmlJavaTypeAdapter(HexBinaryAdapter.class)
    protected byte[] color;
    @XmlAttribute
    protected Texture2DBlendModeType blending;
    @XmlAttribute
    protected Texture2DWrapModeType wrapS;
    @XmlAttribute
    protected Texture2DWrapModeType wrapT;
    @XmlAttribute
    protected TextureMipmapModeType levelFilter;
    @XmlAttribute
    protected TextureFilterModeType imageFilter;

    /**
     * Gets the value of the image2D property.
     * 
     * @return
     *     possible object is
     *     {@link Image2D }
     *     
     */
    public Image2D getImage2D() {
        return image2D;
    }

    /**
     * Sets the value of the image2D property.
     * 
     * @param value
     *     allowed object is
     *     {@link Image2D }
     *     
     */
    public void setImage2D(Image2D value) {
        this.image2D = value;
    }

    /**
     * Gets the value of the image2DInstance property.
     * 
     * @return
     *     possible object is
     *     {@link Image2DInstance }
     *     
     */
    public Image2DInstance getImage2DInstance() {
        return image2DInstance;
    }

    /**
     * Sets the value of the image2DInstance property.
     * 
     * @param value
     *     allowed object is
     *     {@link Image2DInstance }
     *     
     */
    public void setImage2DInstance(Image2DInstance value) {
        this.image2DInstance = value;
    }

    /**
     * Gets the value of the color property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public byte[] getColor() {
        if (color == null) {
            return new HexBinaryAdapter().unmarshal("00FFFFFF");
        } else {
            return color;
        }
    }

    /**
     * Sets the value of the color property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setColor(byte[] value) {
        this.color = ((byte[]) value);
    }

    /**
     * Gets the value of the blending property.
     * 
     * @return
     *     possible object is
     *     {@link Texture2DBlendModeType }
     *     
     */
    public Texture2DBlendModeType getBlending() {
        return blending;
    }

    /**
     * Sets the value of the blending property.
     * 
     * @param value
     *     allowed object is
     *     {@link Texture2DBlendModeType }
     *     
     */
    public void setBlending(Texture2DBlendModeType value) {
        this.blending = value;
    }

    /**
     * Gets the value of the wrapS property.
     * 
     * @return
     *     possible object is
     *     {@link Texture2DWrapModeType }
     *     
     */
    public Texture2DWrapModeType getWrapS() {
        return wrapS;
    }

    /**
     * Sets the value of the wrapS property.
     * 
     * @param value
     *     allowed object is
     *     {@link Texture2DWrapModeType }
     *     
     */
    public void setWrapS(Texture2DWrapModeType value) {
        this.wrapS = value;
    }

    /**
     * Gets the value of the wrapT property.
     * 
     * @return
     *     possible object is
     *     {@link Texture2DWrapModeType }
     *     
     */
    public Texture2DWrapModeType getWrapT() {
        return wrapT;
    }

    /**
     * Sets the value of the wrapT property.
     * 
     * @param value
     *     allowed object is
     *     {@link Texture2DWrapModeType }
     *     
     */
    public void setWrapT(Texture2DWrapModeType value) {
        this.wrapT = value;
    }

    /**
     * Gets the value of the levelFilter property.
     * 
     * @return
     *     possible object is
     *     {@link TextureMipmapModeType }
     *     
     */
    public TextureMipmapModeType getLevelFilter() {
        return levelFilter;
    }

    /**
     * Sets the value of the levelFilter property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextureMipmapModeType }
     *     
     */
    public void setLevelFilter(TextureMipmapModeType value) {
        this.levelFilter = value;
    }

    /**
     * Gets the value of the imageFilter property.
     * 
     * @return
     *     possible object is
     *     {@link TextureFilterModeType }
     *     
     */
    public TextureFilterModeType getImageFilter() {
        return imageFilter;
    }

    /**
     * Sets the value of the imageFilter property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextureFilterModeType }
     *     
     */
    public void setImageFilter(TextureFilterModeType value) {
        this.imageFilter = value;
    }

}
